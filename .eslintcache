[{"/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/index.js":"1","/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/pages/no-match.js":"2","/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/pages/home.js":"3","/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/App.js":"4","/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/pages/post.js":"5","/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/serviceWorker.js":"6","/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/firebase.js":"7","/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/pages/create.js":"8","/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/pages/config.js":"9","/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/pages/md.js":"10"},{"size":452,"mtime":1609574790865,"results":"11","hashOfConfig":"12"},{"size":220,"mtime":1609574790865,"results":"13","hashOfConfig":"12"},{"size":2628,"mtime":1614422815429,"results":"14","hashOfConfig":"12"},{"size":800,"mtime":1614417435465,"results":"15","hashOfConfig":"12"},{"size":1316,"mtime":1614420406776,"results":"16","hashOfConfig":"12"},{"size":4951,"mtime":1609576394515,"results":"17","hashOfConfig":"12"},{"size":612,"mtime":1614416026140,"results":"18","hashOfConfig":"12"},{"size":6375,"mtime":1614418065633,"results":"19","hashOfConfig":"12"},{"size":4789,"mtime":1614417017511,"results":"20","hashOfConfig":"12"},{"size":281,"mtime":1614417994390,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"hie45e",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/index.js",[],["48","49"],"/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/pages/no-match.js",[],"/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/pages/home.js",[],"/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/App.js",[],"/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/pages/post.js",[],["50","51"],"/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/serviceWorker.js",[],["52","53"],"/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/firebase.js",["54"],"import firebase from \"firebase/app\";\nimport database from \"firebase/database\";\n\nconst config = {\n    apiKey: \"AIzaSyBVv98fLq4tDeg5RgwgdIn1-xo9jNF0meQ\",\n    authDomain: \"alex-blog-react.firebaseapp.com\",\n    projectId: \"alex-blog-react\",\n    storageBucket: \"alex-blog-react.appspot.com\",\n    messagingSenderId: \"403179241341\",\n    appId: \"1:403179241341:web:b15d680317a07982d2d614\",\n    measurementId: \"G-2BBH24YDK2\"\n};\n\nlet firebaseCache;\n\nexport const getFirebase = () => {\n  if (firebaseCache) {\n    return firebaseCache;\n  }\n\n  firebase.initializeApp(config);\n  firebaseCache = firebase;\n  return firebase;\n};",["55","56"],"/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/pages/create.js",["57","58","59"],"import React, { useState, useRef } from \"react\";\nimport { getFirebase } from \"../firebase\";\nimport md from './md';\nimport { useDropzone } from 'react-dropzone';\nimport FileReader from 'promise-file-reader';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Icon } from 'semantic-ui-react';\nimport getConfig from './config';\nimport 'react-textarea-markdown-editor/build/TextareaMarkdownEditor.css';\nimport TextareaMarkdownEditor from 'react-textarea-markdown-editor';\n\nconst labelStyles = {\n  display: \"block\",\n  marginBottom: 4\n};\n\nconst inputStyles = {\n  width: \"100%\",\n  height: \"2rem\",\n  lineHeight: \"2rem\",\n  verticalAlign: \"middle\",\n  fontSize: \"1rem\",\n  marginBottom: \"1.5rem\",\n  padding: \"0 0.25rem\"\n};\n\nconst Create = ({ history }) => {\n  const [title, setTitle] = useState(\"\");\n  const [coverImage, setCoverImage] = useState(\"\");\n  const [coverImageAlt, setCoverImageAlt] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [images, setImages] = useState([]);\n  const editorRef = useRef(null);\n  const { getRootProps, getInputProps, open, isDragActive } = useDropzone({\n    // Disable click and keydown behavior\n    noClick: true,\n    noKeyboard: true,\n    multiple: false,\n    accept: 'image/jpeg, image/png',\n    onDropAccepted: async (files) => {\n      const data = await FileReader.readAsDataURL(files[0]);\n      editorRef.current.mark('![', `][image${images.length + 1}]`, 'alt text');\n      setImages([...images, data]);\n    },\n  });\n\n  const markers = [\n    ...getConfig('en'),\n    {\n      key: 'images',\n      markers: [\n        {\n          key: 'images',\n          markers: [\n            {\n              key: 'open',\n              name: <Icon name=\"image\" fitted size=\"large\" onClick={open}/>,\n              title: 'Open file',\n              type: 'component',\n            },\n            ...images.map((data, index) => ({\n              defaultText: 'alt text',\n              key: `image${index + 1}`,\n              name: `image${index + 1}`,\n              prefix: '![',\n              suffix: `][image${index + 1}]`,\n              title: `image${index + 1}`,\n              type: 'marker',\n            })),\n          ],\n          type: 'dropdown',\n        },\n      ],\n    },\n  ];\n\n  async function onPaste (e) {\n    if (!e.clipboardData) {\n      return;\n    }\n    const items = e.clipboardData.items;\n    if (!items) {\n      return;\n    }\n    for (let i = 0; i < items.length; i++) {\n      // Skip content if not image\n      if (items[i].type.indexOf('image') === -1) continue;\n      // Retrieve image on clipboard as blob\n      const file = items[i].getAsFile();\n      console.log(items[i]);\n      if (file) {\n        e.preventDefault();\n        e.stopPropagation();\n        // File name\n        console.log(e.clipboardData.getData('Text'));\n        const data = await FileReader.readAsDataURL(file);\n        console.log(data);\n        editorRef.current.mark('![', `][image${images.length + 1}]`, 'alt text');\n        setImages([...images, data]);\n      }\n    }\n  }\n\n  const generateDate = () => {\n    const now = new Date();\n    const options = { month: \"long\", day: \"numeric\", year: \"numeric\" };\n  \n    const year = now.getFullYear();\n  \n    let month = now.getMonth() + 1;\n    if (month < 10) {\n      month = `0${month}`; // prepend with a 0\n    }\n  \n    let day = now.getDate();\n    if (day < 10) {\n      day = `0${day}`; // prepend with a 0\n    }\n  \n    return {\n      formatted: `${year}-${month}-${day}`,             // used for sorting\n      pretty: now.toLocaleDateString(\"en-US\", options)  // used for displaying\n    };\n  };\n\n  const generateSlug = (title) => {\n    return title.split(\" \")\n                .join(\"-\")\n                .toLowerCase()\n                .normalize('NFD')\n                .replace(/[\\u0300-\\u036f]/g, '')\n                .replace(/đ/g, 'd')\n                .replace(/Đ/g, 'D');\n  }\n\n  const createPost = () => {\n    const date = generateDate();\n    const slug = generateSlug(title);\n    const newPost = {\n      title,\n      dateFormatted: date.formatted,\n      datePretty: date.pretty,\n      slug,\n      coverImage,\n      coverImageAlt,\n      content\n    };\n    getFirebase()\n      .database()\n      .ref()\n      .child(`posts/${slug}`)\n      .set(newPost)\n      .then(() => history.push(`/`));\n  };\n\n  return (\n    <>\n      <h1>Create a new post</h1>\n      <section style={{ margin: \"2rem 0\" }}>\n        <label style={labelStyles} htmlFor=\"title-field\">\n          Title\n        </label>\n        <input\n          style={inputStyles}\n          id=\"title-field\"\n          type=\"text\"\n          value={title}\n          onChange={({ target: { value } }) => {\n            setTitle(value);\n          }}\n        />\n\n        <label style={labelStyles} htmlFor=\"cover-image-field\">\n          Cover image\n        </label>\n        <input\n          style={inputStyles}\n          id=\"cover-image-field\"\n          type=\"text\"\n          value={coverImage}\n          onChange={({ target: { value } }) => {\n            setCoverImage(value);\n          }}\n        />\n\n        <label style={labelStyles} htmlFor=\"cover-image-alt-field\">\n          Cover image alt\n        </label>\n        <input\n          style={inputStyles}\n          id=\"cover-image-alt-field\"\n          type=\"text\"\n          value={coverImageAlt}\n          onChange={({ target: { value } }) => {\n            setCoverImageAlt(value);\n          }}\n        />\n\n        <label style={labelStyles} htmlFor=\"content-field\">\n          Content\n        </label>\n  \n        <TextareaMarkdownEditor \n          id='content'\n          value={content}\n          onChange={(value) => setContent(value)}\n          doParse={text => md.render(`${text}\\n\\n${images.map((data, index) => `[image${index + 1}]: ${data}`).join('\\n\\n')}`)}\n          ref={editorRef} \n          markers={markers}\n          rows={10}\n          placeholder=\"You can paste or drag your image here!\"\n          onPaste={onPaste}\n        />\n\n        <div style={{ textAlign: \"right\" }}>\n          <button\n            style={{\n              border: \"none\",\n              color: \"#fff\",\n              backgroundColor: \"#039be5\",\n              borderRadius: \"4px\",\n              padding: \"8px 12px\",\n              fontSize: \"0.9rem\"\n            }}\n            onClick={createPost}\n          >\n            Create\n          </button>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Create;","/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/pages/config.js",[],"/home/mrzero/Documents/Code/React_Projects/alex-blog-react/src/pages/md.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"60","replacedBy":"64"},{"ruleId":"62","replacedBy":"65"},{"ruleId":"60","replacedBy":"66"},{"ruleId":"62","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":16},{"ruleId":"60","replacedBy":"72"},{"ruleId":"62","replacedBy":"73"},{"ruleId":"68","severity":1,"message":"74","line":34,"column":11,"nodeType":"70","messageId":"71","endLine":34,"endColumn":23},{"ruleId":"68","severity":1,"message":"75","line":34,"column":25,"nodeType":"70","messageId":"71","endLine":34,"endColumn":38},{"ruleId":"68","severity":1,"message":"76","line":34,"column":46,"nodeType":"70","messageId":"71","endLine":34,"endColumn":58},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],["77"],["78"],["77"],["78"],"no-unused-vars","'database' is defined but never used.","Identifier","unusedVar",["77"],["78"],"'getRootProps' is assigned a value but never used.","'getInputProps' is assigned a value but never used.","'isDragActive' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]